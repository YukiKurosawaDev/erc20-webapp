{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/bignumber.js/bignumber.js","../../src/index.ts","../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","a","s","z","j","r","charCodeAt","compare","x","y","b","xc","c","yc","k","e","l","intCheck","min","max","Error","String","isOdd","toExponential","str","charAt","toFixedPoint","zs","clone","configObject","div","convertBase","parseNumeric","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","alphabet","caseChanged","isNum","this","_isBigNumber","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","format","rm","id","c0","ne","maxOrMin","args","method","m","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","define","AbstractConnector","supportedChainIds","emitUpdate","ConnectorEvent","emitError","emitDeactivate","_catch","body","recover","result","parseSendReturn","sendReturn","NoEthereumProviderError","UserRejectedRequestError","InjectedConnector","handleChainChanged","chainId","provider","window","ethereum","handleAccountsChanged","accounts","account","handleClose","handleNetworkChanged","error","deactivate"],"mappings":"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","file":"static/js/3.a267e89a.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","import { AbstractConnectorArguments, ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport warning from 'tiny-warning'\n\nimport { SendReturnResult, SendReturn, Send, SendOld } from './types'\n\nfunction parseSendReturn(sendReturn: SendReturnResult | SendReturn): any {\n  return sendReturn.hasOwnProperty('result') ? sendReturn.result : sendReturn\n}\n\nexport class NoEthereumProviderError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'No Ethereum provider was found on window.ethereum.'\n  }\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nexport class InjectedConnector extends AbstractConnector {\n  constructor(kwargs: AbstractConnectorArguments) {\n    super(kwargs)\n\n    this.handleNetworkChanged = this.handleNetworkChanged.bind(this)\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleClose = this.handleClose.bind(this)\n  }\n\n  private handleChainChanged(chainId: string | number): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId, provider: window.ethereum })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    if (accounts.length === 0) {\n      this.emitDeactivate()\n    } else {\n      this.emitUpdate({ account: accounts[0] })\n    }\n  }\n\n  private handleClose(code: number, reason: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'close' event with payload\", code, reason)\n    }\n    this.emitDeactivate()\n  }\n\n  private handleNetworkChanged(networkId: string | number): void {\n    if (__DEV__) {\n      console.log(\"Handling 'networkChanged' event with payload\", networkId)\n    }\n    this.emitUpdate({ chainId: networkId, provider: window.ethereum })\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!window.ethereum) {\n      throw new NoEthereumProviderError()\n    }\n\n    if (window.ethereum.on) {\n      window.ethereum.on('chainChanged', this.handleChainChanged)\n      window.ethereum.on('accountsChanged', this.handleAccountsChanged)\n      window.ethereum.on('close', this.handleClose)\n      window.ethereum.on('networkChanged', this.handleNetworkChanged)\n    }\n\n    if ((window.ethereum as any).isMetaMask) {\n      ;(window.ethereum as any).autoRefreshOnNetworkChange = false\n    }\n\n    // try to activate + get account via eth_requestAccounts\n    let account\n    try {\n      account = await (window.ethereum.send as Send)('eth_requestAccounts').then(\n        sendReturn => parseSendReturn(sendReturn)[0]\n      )\n    } catch (error) {\n      if ((error as any).code === 4001) {\n        throw new UserRejectedRequestError()\n      }\n      warning(false, 'eth_requestAccounts was unsuccessful, falling back to enable')\n    }\n\n    // if unsuccessful, try enable\n    if (!account) {\n      // if enable is successful but doesn't return accounts, fall back to getAccount (not happy i have to do this...)\n      account = await window.ethereum.enable().then(sendReturn => sendReturn && parseSendReturn(sendReturn)[0])\n    }\n\n    return { provider: window.ethereum, ...(account ? { account } : {}) }\n  }\n\n  public async getProvider(): Promise<any> {\n    return window.ethereum\n  }\n\n  public async getChainId(): Promise<number | string> {\n    if (!window.ethereum) {\n      throw new NoEthereumProviderError()\n    }\n\n    let chainId\n    try {\n      chainId = await (window.ethereum.send as Send)('eth_chainId').then(parseSendReturn)\n    } catch {\n      warning(false, 'eth_chainId was unsuccessful, falling back to net_version')\n    }\n\n    if (!chainId) {\n      try {\n        chainId = await (window.ethereum.send as Send)('net_version').then(parseSendReturn)\n      } catch {\n        warning(false, 'net_version was unsuccessful, falling back to net version v2')\n      }\n    }\n\n    if (!chainId) {\n      try {\n        chainId = parseSendReturn((window.ethereum.send as SendOld)({ method: 'net_version' }))\n      } catch {\n        warning(false, 'net_version v2 was unsuccessful, falling back to manual matches and static properties')\n      }\n    }\n\n    if (!chainId) {\n      if ((window.ethereum as any).isDapper) {\n        chainId = parseSendReturn((window.ethereum as any).cachedResults.net_version)\n      } else {\n        chainId =\n          (window.ethereum as any).chainId ||\n          (window.ethereum as any).netVersion ||\n          (window.ethereum as any).networkVersion ||\n          (window.ethereum as any)._chainId\n      }\n    }\n\n    return chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    if (!window.ethereum) {\n      throw new NoEthereumProviderError()\n    }\n\n    let account\n    try {\n      account = await (window.ethereum.send as Send)('eth_accounts').then(sendReturn => parseSendReturn(sendReturn)[0])\n    } catch {\n      warning(false, 'eth_accounts was unsuccessful, falling back to enable')\n    }\n\n    if (!account) {\n      try {\n        account = await window.ethereum.enable().then(sendReturn => parseSendReturn(sendReturn)[0])\n      } catch {\n        warning(false, 'enable was unsuccessful, falling back to eth_accounts v2')\n      }\n    }\n\n    if (!account) {\n      account = parseSendReturn((window.ethereum.send as SendOld)({ method: 'eth_accounts' }))[0]\n    }\n\n    return account\n  }\n\n  public deactivate() {\n    if (window.ethereum && window.ethereum.removeListener) {\n      window.ethereum.removeListener('chainChanged', this.handleChainChanged)\n      window.ethereum.removeListener('accountsChanged', this.handleAccountsChanged)\n      window.ethereum.removeListener('close', this.handleClose)\n      window.ethereum.removeListener('networkChanged', this.handleNetworkChanged)\n    }\n  }\n\n  public async isAuthorized(): Promise<boolean> {\n    if (!window.ethereum) {\n      return false\n    }\n\n    try {\n      return await (window.ethereum.send as Send)('eth_accounts').then(sendReturn => {\n        if (parseSendReturn(sendReturn).length > 0) {\n          return true\n        } else {\n          return false\n        }\n      })\n    } catch {\n      return false\n    }\n  }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n"],"sourceRoot":""}